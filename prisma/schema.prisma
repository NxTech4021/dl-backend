
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  name                String
  email               String             @unique
  emailVerified       Boolean            @default(false)
  image               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  displayUsername     String?
  username            String             @unique
  role                Role               @default(USER)
  dateOfBirth         DateTime?
  gender              String?
  area                String?
  completedOnboarding Boolean            @default(false)
  lastActivityCheck   DateTime?
  lastLogin           DateTime?
  status              String             @default("active")
  bio                 String?
  phoneNumber         String?
  admin               Admin?
  opponentMatches     Match[]            @relation("OpponentMatches")
  playerMatches       Match[]            @relation("PlayerMatches")
  achievements        UserAchievement[]
  accounts            Account[]
  sessions            Session[]
  seasonMemberships   SeasonMembership[]
  leagueSettingsAudits LeagueSettingsAudit[] @relation("LeagueSettingsAuditAdmin")
  leagueJoinRequests   LeagueJoinRequest[]   @relation("LeagueJoinRequestUser")
  leagueJoinDecisions  LeagueJoinRequest[]   @relation("LeagueJoinRequestDecider")
  leagueTemplates      LeagueTemplate[]      @relation("LeagueTemplateCreator")

  @@index([email])
  @@index([username])
  @@index([status])
  @@index([completedOnboarding])
  @@index([createdAt])
  @@map("user")
}

model Admin {
  id        String            @id @default(cuid())
  userId    String?           @unique
  status    AdminStatus       @default(PENDING)
  invitedBy String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User?             @relation(fields: [userId], references: [id])
  invite    AdminInviteToken?
}

model AdminInviteToken {
  id        String   @id @default(cuid())
  adminId   String   @unique
  email     String
  token     String   @unique
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  expiresAt DateTime
  admin     Admin    @relation(fields: [adminId], references: [id])
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  status     String   @default("PENDING")
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model QuestionnaireResponse {
  id          Int                  @id @default(autoincrement())
  userId      String
  sport       String
  qVersion    Int
  qHash       String
  answersJson Json
  startedAt   DateTime             @default(now())
  completedAt DateTime?
  result      InitialRatingResult?

  @@index([userId])
  @@index([sport, qVersion])
  @@index([qHash])
}

model InitialRatingResult {
  id         Int                   @id @default(autoincrement())
  responseId Int                   @unique
  source     String
  singles    Int?
  doubles    Int?
  rd         Int?
  confidence String?
  detail     Json?
  createdAt  DateTime              @default(now())
  response   QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}


model League {
  id                   String                @id @default(cuid())
  name                 String
  sport                String
  status               LeagueStatus          @default(DRAFT)
  location             String
  description          String?
  brandingLogoUrl      String?
  brandingPrimaryColor String?
  brandingSecondaryColor String?
  theme                String?
  isArchived           Boolean               @default(false)
  archivedAt           DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  seasons              Season[]
  settings             LeagueSettings?
  joinRequests         LeagueJoinRequest[]
}

model LeagueSettings {
  id                       String                 @id @default(cuid())
  leagueId                 String                 @unique
  durationUnit             LeagueDurationUnit     @default(WEEKS)
  durationValue            Int?
  minPlayersPerDivision    Int?
  maxPlayersPerDivision    Int?
  registrationDeadlineDays Int?
  paymentSettings          Json?
  divisionRules            Json?
  playoffConfiguration     Json?
  finalsConfiguration      Json?
  workflowConfiguration    Json?
  templates                Json?
  customRulesText          String?
  integrationSettings      Json?
  bulkOperations           Json?
  archiveRetentionMonths   Int?
  validationRules          Json?
  errorHandling            Json?
  previewPayload           Json?
  previewExpiresAt         DateTime?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  league                   League                 @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  audits                   LeagueSettingsAudit[]

  @@index([leagueId])
}

model LeagueSettingsAudit {
  id         String   @id @default(cuid())
  settingsId String
  adminId    String?
  changes    Json
  createdAt  DateTime @default(now())
  settings   LeagueSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  admin      User?    @relation("LeagueSettingsAuditAdmin", fields: [adminId], references: [id])

  @@index([settingsId])
  @@index([adminId])
}

model LeagueJoinRequest {
  id             String                   @id @default(cuid())
  leagueId       String
  userId         String
  status         LeagueJoinRequestStatus  @default(PENDING)
  notes          String?
  decisionReason String?
  decidedById    String?
  decidedAt      DateTime?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  league         League                   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user           User                     @relation("LeagueJoinRequestUser", fields: [userId], references: [id], onDelete: Cascade)
  decidedBy      User?                    @relation("LeagueJoinRequestDecider", fields: [decidedById], references: [id])

  @@unique([leagueId, userId])
  @@index([leagueId])
  @@index([userId])
  @@index([status])
}

model LeagueTemplate {
  id          String   @id @default(cuid())
  name        String
  sport       String
  description String?
  settings    Json?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User?    @relation("LeagueTemplateCreator", fields: [createdById], references: [id])

  @@index([sport])
}

model Season {
  id           String             @id @default(cuid())
  leagueId     String?
  name         String
  startDate    DateTime?
  endDate      DateTime?
  regiDeadline DateTime?
  description  String?
  sportType    String?
  seasonType   String? // single or double         
  status       SeasonStatus       @default(UPCOMING)
  current      Boolean            @default(false) // Quick flag for the current active season
  divisions    Division[]
  memberships  SeasonMembership[]
  league       League?            @relation(fields: [leagueId], references: [id], onDelete: SetNull)
  // Future link up with matches 
  // matches         Match[] 
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  // Highly useful for fast lookup of the current season
  @@index([sportType])
  @@index([status])
  @@index([current])
  @@index([leagueId])
}

// Represents the divisions within a specific season.

model Division {
  id          String             @id @default(cuid())
  seasonId    String
  name        String
  description String?
  minRating   Float?
  maxRating   Float?
  threshold   Int? // Relations
  season      Season             @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  memberships SeasonMembership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([seasonId, name])
  @@index([seasonId])
}

model SeasonMembership {
  id               String   @id @default(cuid())
  userId           String
  seasonId         String
  divisionId       String
  status           String   @default("ACTIVE") // 'ACTIVE' | 'INACTIVE' | 'FLAGGED' | 'REMOVED'
  joinedAt         DateTime @default(now())
  withdrawalReason String? // For handling "View Withdrawal Request"
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  season           Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  division         Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)

  @@unique([userId, seasonId, divisionId])
  @@index([userId])
  @@index([seasonId])
  @@index([divisionId, status])
}

model Match {
  id            String      @id @default(cuid())
  playerId      String
  opponentId    String
  sport         String
  matchType     String
  playerScore   Int
  opponentScore Int
  outcome       String
  matchDate     DateTime    @default(now())
  location      String?
  notes         String?
  duration      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  opponent      User        @relation("OpponentMatches", fields: [opponentId], references: [id], onDelete: Cascade)
  player        User        @relation("PlayerMatches", fields: [playerId], references: [id], onDelete: Cascade)
  stats         MatchStats?

  @@index([playerId])
  @@index([opponentId])
  @@index([sport])
  @@index([matchDate])
}

model MatchStats {
  id                     String   @id @default(cuid())
  matchId                String   @unique
  playerAces             Int?
  playerUnforcedErrors   Int?
  playerWinners          Int?
  playerDoubleFaults     Int?
  opponentAces           Int?
  opponentUnforcedErrors Int?
  opponentWinners        Int?
  opponentDoubleFaults   Int?
  rallyCount             Int?
  longestRally           Int?
  breakPointsConverted   Int?
  breakPointsTotal       Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  match                  Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model Achievement {
  id               String            @id @default(cuid())
  title            String
  description      String
  icon             String?
  category         String
  requirement      Json?
  points           Int               @default(0)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]

  @@index([category])
  @@index([isActive])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Json?
  isCompleted   Boolean     @default(true)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

enum LeagueStatus {
  DRAFT
  REGISTRATION
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum LeagueDurationUnit {
  WEEKS
  MONTHS
}

enum LeagueJoinRequestStatus {
  PENDING
  APPROVED
  DENIED
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum AdminStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SeasonStatus {
  UPCOMING
  ACTIVE
  FINISHED
  CANCELLED
}

enum MembershipStatus {
  PENDING
  ACTIVE
  FLAGGED
  INACTIVE
  REMOVED
}

// Future - use one status enum for matches/divisions/leagues

enum Statuses {
  ACTIVE
  INACTIVE
  SUSPENDED
  UPCOMING
  ONGOING
  FINISHED
  CANCELLED
}


