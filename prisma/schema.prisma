generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  username        String    @unique
  displayUsername String?
  email           String    @unique
  emailVerified   Boolean   @default(false)
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?   @db.Text
  password              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerId, accountId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model QuestionnaireResponse {
  id           Int       @id @default(autoincrement())
  userId       String    // Changed to String to match User.id type
  sport        String              // 'pickleball' | 'tennis' | 'padel'
  qVersion     Int                 // from JSON file
  qHash        String              // SHA1 of JSON contents
  answersJson  Json                // raw client payload
  startedAt    DateTime  @default(now())
  completedAt  DateTime?

  // one-to-one
  result       InitialRatingResult?

  @@index([userId])
  @@index([sport, qVersion])
  @@index([qHash])
}

model InitialRatingResult {
  id          Int       @id @default(autoincrement())
  responseId  Int       @unique
  source      String              // 'questionnaire' | 'dupr_conversion' | ...
  singles     Int?
  doubles     Int?
  rd          Int?
  confidence  String?
  detail      Json?
  createdAt   DateTime  @default(now())

  response    QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}
