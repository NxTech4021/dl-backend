generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(cuid())
  name                String
  email               String            @unique
  emailVerified       Boolean           @default(false)
  image               String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  displayUsername     String?
  username            String            @unique
  role                Role              @default(USER)
  dateOfBirth         DateTime?
  gender              String?
  area                String?
  completedOnboarding Boolean           @default(false)
  lastActivityCheck   DateTime?
  lastLogin           DateTime?
  status              String            @default("active")
  bio                 String?
  phoneNumber         String?
  admin               Admin?
  opponentMatches     Match[]           @relation("OpponentMatches")
  playerMatches       Match[]           @relation("PlayerMatches")
  achievements        UserAchievement[]
  accounts            Account[]
  sessions            Session[]

  @@index([email])
  @@index([username])
  @@index([status])
  @@index([completedOnboarding])
  @@index([createdAt])
}

model Admin {
  id        String            @id @default(cuid())
  userId    String?           @unique
  status    AdminStatus       @default(PENDING)
  invitedBy String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User?             @relation(fields: [userId], references: [id])
  invite    AdminInviteToken?
}

model AdminInviteToken {
  id        String   @id @default(cuid())
  adminId   String   @unique
  email     String
  token     String   @unique
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  expiresAt DateTime
  admin     Admin    @relation(fields: [adminId], references: [id])
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  status     String   @default("PENDING")
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model QuestionnaireResponse {
  id          Int                  @id @default(autoincrement())
  userId      String
  sport       String
  qVersion    Int
  qHash       String
  answersJson Json
  startedAt   DateTime             @default(now())
  completedAt DateTime?
  result      InitialRatingResult?

  @@index([userId])
  @@index([sport, qVersion])
  @@index([qHash])
}

model InitialRatingResult {
  id         Int                   @id @default(autoincrement())
  responseId Int                   @unique
  source     String
  singles    Int?
  doubles    Int?
  rd         Int?
  confidence String?
  detail     Json?
  createdAt  DateTime              @default(now())
  response   QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}

model Season {
  id              String         @id @default(cuid())
  name            String        
  startDate       DateTime
  endDate         DateTime
  description     String?
  sportType       String? 
  seasonType      String?         // single or double         
  status          SeasonStatus   @default("UPCOMING") // 'UPCOMING' | 'ACTIVE' | 'COMPLETED'
  current         Boolean        @default(false)     // Quick flag for the current active season
  divisions       Division[]
  memberships     SeasonMembership[]
  
  // Future link up with matches 
  // matches         Match[] 
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([sportType])
  @@index([status])
  @@index([current]) // Highly useful for fast lookup of the current season
}

// Represents the divisions within a specific season.
model Division {
  id              String         @id @default(cuid())
  seasonId        String
  name            String         
  description     String?
  minRating       Float?
  maxRating       Float?
  threshold       Int?           
  
  // Relations
  season          Season         @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  memberships     SeasonMembership[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@unique([seasonId, name]) 
  @@index([seasonId])
  @@index([divisionType])
}

model SeasonMembership {
  id              String         @id @default(cuid())
  userId          String
  seasonId        String
  divisionId      String
  status          String         @default("ACTIVE") // 'ACTIVE' | 'INACTIVE' | 'FLAGGED' | 'REMOVED'
  joinedAt        DateTime       @default(now())
  withdrawalReason String?        // For handling "View Withdrawal Request"
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  season          Season         @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  division        Division       @relation(fields: [divisionId], references: [id], onDelete: Cascade)

 
  @@unique([userId, seasonId, divisionId]) 
  @@index([userId])
  @@index([seasonId])
  @@index([divisionId, status]) 
}

model Match {
  id            String      @id @default(cuid())
  playerId      String
  opponentId    String
  sport         String
  matchType     String
  playerScore   Int
  opponentScore Int
  outcome       String
  matchDate     DateTime    @default(now())
  location      String?
  notes         String?
  duration      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  opponent      User        @relation("OpponentMatches", fields: [opponentId], references: [id], onDelete: Cascade)
  player        User        @relation("PlayerMatches", fields: [playerId], references: [id], onDelete: Cascade)
  stats         MatchStats?

  @@index([playerId])
  @@index([opponentId])
  @@index([sport])
  @@index([matchDate])
}

model MatchStats {
  id                     String   @id @default(cuid())
  matchId                String   @unique
  playerAces             Int?
  playerUnforcedErrors   Int?
  playerWinners          Int?
  playerDoubleFaults     Int?
  opponentAces           Int?
  opponentUnforcedErrors Int?
  opponentWinners        Int?
  opponentDoubleFaults   Int?
  rallyCount             Int?
  longestRally           Int?
  breakPointsConverted   Int?
  breakPointsTotal       Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  match                  Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model Achievement {
  id               String            @id @default(cuid())
  title            String
  description      String
  icon             String?
  category         String
  requirement      Json?
  points           Int               @default(0)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]

  @@index([category])
  @@index([isActive])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Json?
  isCompleted   Boolean     @default(true)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum AdminStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SeasonStatus {
  UPCOMING
  ONGOING
  FINISHED
  CANCELLED
}

enum MembershipStatus {
  PENDING
  ACTIVE
  FLAGGED
  INACTIVE
  REMOVED
}

// Future - use one status enum for matches/divisions/leagues
enum Statuses {
  ACTIVE
  INACTIVE
  SUSPENDED
  UPCOMING
  ONGOING
  FINISHED
  CANCELLED
}

