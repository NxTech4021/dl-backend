generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum AdminStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

//
// MODELS
//
model User {
  id                   String    @id @default(cuid())
  name                 String
  username             String    @unique
  displayUsername      String?
  email                String    @unique
  emailVerified        Boolean   @default(false)
  image                String?
  gender               String?   // 'male' | 'female'
  dateOfBirth          DateTime?
  area                 String?
  status               String    @default("active")   // 'active' | 'inactive'
  completedOnboarding  Boolean   @default(false)
  lastLogin            DateTime?
  lastActivityCheck    DateTime?

  // Relations
  accounts             Account[]
  sessions             Session[]
  playerMatches        Match[]   @relation("PlayerMatches")
  opponentMatches      Match[]   @relation("OpponentMatches")
  admin                Admin?
  location             UserLocation?
  questionnaireResponses QuestionnaireResponse[]

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  role                 Role      @default(USER)
}

model Admin {
  id         String       @id @default(cuid())
  userId     String       @unique
  status     AdminStatus  @default(PENDING)
  invitedBy  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  invite AdminInviteToken?
}

model AdminInviteToken {
  id        String   @id @default(cuid())
  adminId   String   @unique
  email     String
  token     String   @unique
  status    String   @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  createdAt DateTime @default(now())
  expiresAt DateTime

  admin Admin @relation(fields: [adminId], references: [id])
}

// Simpler admin invite placeholder (from 2nd schema, kept separately if needed later)
model AdminInvite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  status    String   @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?   @db.Text
  password              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  status     String   @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model QuestionnaireResponse {
  id          Int       @id @default(autoincrement())
  userId      String
  sport       String
  qVersion    Int
  qHash       String
  answersJson Json
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // one-to-one
  result InitialRatingResult?

  // relation to User
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sport, qVersion])
  @@index([qHash])
}

model InitialRatingResult {
  id         Int      @id @default(autoincrement())
  responseId Int      @unique
  source     String
  singles    Int?
  doubles    Int?
  rd         Int?
  confidence String?
  detail     Json?
  createdAt  DateTime @default(now())

  response QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}

model Match {
  id            String      @id @default(cuid())
  playerId      String
  opponentId    String
  sport         String
  matchType     String
  playerScore   Int
  opponentScore Int
  outcome       String
  matchDate     DateTime    @default(now())
  location      String?
  notes         String?
  duration      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  player        User        @relation("PlayerMatches", fields: [playerId], references: [id], onDelete: Cascade)
  opponent      User        @relation("OpponentMatches", fields: [opponentId], references: [id], onDelete: Cascade)
  stats         MatchStats?

  @@index([playerId])
  @@index([opponentId])
  @@index([sport])
  @@index([matchDate])
}

model MatchStats {
  id                     String   @id @default(cuid())
  matchId                String   @unique
  playerAces             Int?
  playerUnforcedErrors   Int?
  playerWinners          Int?
  playerDoubleFaults     Int?
  opponentAces           Int?
  opponentUnforcedErrors Int?
  opponentWinners        Int?
  opponentDoubleFaults   Int?
  rallyCount             Int?
  longestRally           Int?
  breakPointsConverted   Int?
  breakPointsTotal       Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model UserLocation {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  country   String
  state     String
  city      String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
