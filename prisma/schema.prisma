generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}


model User {
  id              String        @id @default(cuid())
  name            String
  username        String        @unique
  displayUsername String?
  email           String        @unique
  emailVerified   Boolean       @default(false)
  image           String?
  gender          String?   // 'male' | 'female'
  dateOfBirth     DateTime?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  role            Role          @default(USER)
  location        UserLocation?
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([providerId, accountId])
}


model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// To be used later 
model AdminInvite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  status    String   @default("PENDING") // PENDING, ACCEPTED, EXPIRED
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  status     String   @default("PENDING") // NEW: PENDING, ACCEPTED, EXPIRED
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model QuestionnaireResponse {
  id          Int                  @id @default(autoincrement())
  userId      String
  sport       String
  qVersion    Int
  qHash       String
  answersJson Json
  startedAt   DateTime             @default(now())
  completedAt DateTime?
  result      InitialRatingResult?

  @@index([userId])
  @@index([sport, qVersion])
  @@index([qHash])
}

model InitialRatingResult {
  id          Int       @id @default(autoincrement())
  responseId  Int       @unique
  source      String              // 'questionnaire' | 'dupr_conversion' | ...
  singles     Int?
  doubles     Int?
  rd          Int?
  confidence  String?
  detail      Json?
  createdAt   DateTime  @default(now())

  response    QuestionnaireResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
}

model UserLocation {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  country   String
  state     String
  city      String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
