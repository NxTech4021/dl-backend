import {
  Prisma,
  PrismaClient,
  GameType,
  Gender,
  SportType,
  Statuses,
} from "@prisma/client";

const prisma = new PrismaClient();

type SeededAdmin = {
  userId: string;
  adminId?: string;
};

async function seedAdmin(): Promise<SeededAdmin> {
  const { hashPassword } = await import("better-auth/crypto");

  const existingAdmin = await prisma.user.findUnique({
    where: { email: "admin@dleague.com" },
    include: { admin: true },
  });

  if (existingAdmin) {
    if (!existingAdmin.admin) {
      const adminRecord = await prisma.admin.create({
        data: {
          userId: existingAdmin.id,
          status: "ACTIVE",
        },
      });
      return { userId: existingAdmin.id, adminId: adminRecord.id };
    }
    return { userId: existingAdmin.id, adminId: existingAdmin.admin.id };
  }

  const adminUser = await prisma.user.create({
    data: {
      name: "Admin User",
      email: "admin@dleague.com",
      username: "admin",
      role: "ADMIN",
      emailVerified: true,
    },
  });

  const hashedPassword = await hashPassword("Admin@123");

  await prisma.account.create({
    data: {
      userId: adminUser.id,
      accountId: adminUser.id,
      providerId: "credential",
      password: hashedPassword,
    },
  });

  const adminRecord = await prisma.admin.create({
    data: {
      userId: adminUser.id,
      status: "ACTIVE",
    },
  });

  return { userId: adminUser.id, adminId: adminRecord?.id ?? undefined };
}

async function seedLeagueAndSeason(createdByAdminId?: string) {
  const existingLeague = await prisma.league.findFirst();
  if (existingLeague) {
    return;
  }

  const league = await prisma.league.create({
    data: {
      name: "Demo League",
      location: "Kuala Lumpur",
      sportType: SportType.PICKLEBALL,
      gameType: GameType.SINGLES,
      status: Statuses.UPCOMING,
      ...(createdByAdminId ? { createdById: createdByAdminId } : {}),
      description: "Sample league generated by seed script.",
    },
  });

  const category = await prisma.category.create({
    data: {
      leagueId: league.id,
      name: "Open Category",
      genderRestriction: Gender.MIXED,
      matchFormat: "Best of 3 sets",
      isActive: true,
      categoryOrder: 1,
    },
  });

  await prisma.season.create({
    data: {
      name: "Demo Season",
      leagueId: league.id,
      categoryId: category.id,
      entryFee: new Prisma.Decimal(50),
      status: "UPCOMING",
      description: "Seeded season for quick testing.",
      paymentRequired: false,
      promoCodeSupported: false,
      withdrawalEnabled: false,
    },
  });
}

async function main() {
  console.log("🌱 Starting database seed...\n");

  try {
    const admin = await seedAdmin();
    console.log("✅ Admin ready: admin@dleague.com / Admin@123\n");

    await seedLeagueAndSeason(admin.adminId);
    console.log("✅ Demo league & season available for development.\n");

    console.log("🌟 Database seeded successfully!");
  } catch (error) {
    console.error("❌ Error seeding database:", error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
